(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.folproof = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"proof":3,"clause_list":4,"proof_option0":5,"ENDOFFILE":6,"box":7,"EOL":8,"BOX":9,"with":10,"box_option0":11,"DEBOX":12,"box_option1":13,"sentence":14,"box_option2":15,"WITH":16,"ID":17,"e_iff":18,"IFF":19,"e_imp":20,"e_exists":21,"IMPLIES":22,"EXISTS":23,"e_forall":24,"FORALL":25,"e_or":26,"OR":27,"e_and":28,"AND":29,"e_eq":30,"EQUALS":31,"e_not":32,"NOT":33,"atom":34,"term":35,"LPAREN":36,"RPAREN":37,"term_list":38,"COMMA":39,"JUSTIFICATION":40,"$accept":0,"$end":1},
terminals_: {2:"error",6:"ENDOFFILE",8:"EOL",9:"BOX",12:"DEBOX",16:"WITH",17:"ID",19:"IFF",22:"IMPLIES",23:"EXISTS",25:"FORALL",27:"OR",29:"AND",31:"EQUALS",33:"NOT",36:"LPAREN",37:"RPAREN",39:"COMMA",40:"JUSTIFICATION"},
productions_: [0,[3,3],[4,1],[4,3],[4,0],[7,6],[7,4],[7,2],[10,2],[14,1],[14,1],[18,3],[18,1],[20,3],[20,1],[21,3],[21,1],[24,3],[24,1],[26,3],[26,1],[28,3],[28,1],[30,3],[30,1],[32,2],[32,1],[34,1],[34,3],[38,1],[38,3],[35,4],[35,3],[35,1],[5,0],[5,1],[11,0],[11,1],[13,0],[13,1],[15,0],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-2]; return this.$; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 4: this.$ = []; 
break;
case 5: this.$ = ['folbox', $$[$0-2], $$[$0-4], this._$];
		if ($$[$0-2] && $$[$0-2][0] && $$[$0-2][0][0] == 'rule' && $$[$0-2][0][2].auto)
			$$[$0-2][0][2] = ['assumption', null];
	
break;
case 6: this.$ = ['box', $$[$0-2], this._$];
		if ($$[$0-2] && $$[$0-2][0] && $$[$0-2][0][0] == 'rule' && $$[$0-2][0][2].auto)
			$$[$0-2][0][2] = ['assumption', null];
	
break;
case 7: this.$ = $$[$0-1][0] != 'error'
			? ['rule', $$[$0-1], $$[$0], this._$]
			: $$[$0-1];
		if (this.$[0] === 'rule' && !this.$[2]) {
			this.$[2] = ['premise', null];
			this.$[2].auto = true;
		}
	
break;
case 8: this.$ = ['with', $$[$0]]; 
break;
case 10: this.$ = ['error', yytext]; 
break;
case 11: this.$ = ['iff', $$[$0-2], $$[$0]]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = ['->', $$[$0-2], $$[$0]]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = ['exists', $$[$0-1], $$[$0]]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = ['forall', $$[$0-1], $$[$0]]; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = ['or', $$[$0-2], $$[$0]]; 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = ['and', $$[$0-2], $$[$0]]; 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = ['=', $$[$0-2], $$[$0]]; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = ['not', $$[$0]]; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = $$[$0-1]; this.$.userParens = true; 
break;
case 29: this.$ = [$$[$0]]; 
break;
case 30: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 31: this.$ = ['id', $$[$0-3], $$[$0-1]]; 
break;
case 32: this.$ = ['id', $$[$0-2], []]; 
break;
case 33: this.$ = ['id', $$[$0]]; 
break;
}
},
table: [{2:[1,7],3:1,4:2,6:[2,4],7:3,8:[2,4],9:[1,4],14:5,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{1:[3]},{5:22,6:[2,34],8:[1,23]},{6:[2,2],8:[2,2],12:[2,2]},{2:[1,7],4:25,7:3,8:[2,4],9:[1,4],10:24,12:[2,4],14:5,16:[1,26],17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{6:[2,40],8:[2,40],12:[2,40],15:27,40:[1,28]},{6:[2,9],8:[2,9],12:[2,9],19:[1,29],37:[2,9],40:[2,9]},{6:[2,10],8:[2,10],12:[2,10],37:[2,10],40:[2,10]},{6:[2,12],8:[2,12],12:[2,12],19:[2,12],37:[2,12],40:[2,12]},{6:[2,14],8:[2,14],12:[2,14],19:[2,14],22:[1,30],37:[2,14],40:[2,14]},{17:[1,31]},{6:[2,16],8:[2,16],12:[2,16],19:[2,16],22:[2,16],37:[2,16],40:[2,16]},{17:[1,32]},{6:[2,18],8:[2,18],12:[2,18],19:[2,18],22:[2,18],27:[1,33],37:[2,18],40:[2,18]},{6:[2,20],8:[2,20],12:[2,20],19:[2,20],22:[2,20],27:[2,20],29:[1,34],37:[2,20],40:[2,20]},{6:[2,22],8:[2,22],12:[2,22],19:[2,22],22:[2,22],27:[2,22],29:[2,22],31:[1,35],37:[2,22],40:[2,22]},{6:[2,24],8:[2,24],12:[2,24],19:[2,24],22:[2,24],27:[2,24],29:[2,24],31:[2,24],37:[2,24],40:[2,24]},{17:[1,21],32:36,33:[1,17],34:18,35:19,36:[1,20]},{6:[2,26],8:[2,26],12:[2,26],19:[2,26],22:[2,26],27:[2,26],29:[2,26],31:[2,26],37:[2,26],40:[2,26]},{6:[2,27],8:[2,27],12:[2,27],19:[2,27],22:[2,27],27:[2,27],29:[2,27],31:[2,27],37:[2,27],40:[2,27]},{2:[1,7],14:37,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{6:[2,33],8:[2,33],12:[2,33],19:[2,33],22:[2,33],27:[2,33],29:[2,33],31:[2,33],36:[1,38],37:[2,33],39:[2,33],40:[2,33]},{6:[1,39]},{2:[1,7],6:[2,35],7:40,9:[1,4],14:5,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{8:[1,41]},{8:[1,43],12:[2,38],13:42},{17:[1,44]},{6:[2,7],8:[2,7],12:[2,7]},{6:[2,41],8:[2,41],12:[2,41]},{17:[1,21],20:45,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],20:46,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],21:47,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],24:48,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],28:49,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],30:50,32:16,33:[1,17],34:18,35:19,36:[1,20]},{17:[1,21],32:51,33:[1,17],34:18,35:19,36:[1,20]},{6:[2,25],8:[2,25],12:[2,25],19:[2,25],22:[2,25],27:[2,25],29:[2,25],31:[2,25],37:[2,25],40:[2,25]},{37:[1,52]},{17:[1,21],35:55,37:[1,54],38:53},{1:[2,1]},{6:[2,3],8:[2,3],12:[2,3]},{2:[1,7],4:56,7:3,8:[2,4],9:[1,4],12:[2,4],14:5,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{12:[1,57]},{2:[1,7],7:40,9:[1,4],12:[2,39],14:5,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{8:[2,8]},{6:[2,11],8:[2,11],12:[2,11],19:[2,11],37:[2,11],40:[2,11]},{6:[2,13],8:[2,13],12:[2,13],19:[2,13],37:[2,13],40:[2,13]},{6:[2,15],8:[2,15],12:[2,15],19:[2,15],22:[2,15],37:[2,15],40:[2,15]},{6:[2,17],8:[2,17],12:[2,17],19:[2,17],22:[2,17],37:[2,17],40:[2,17]},{6:[2,19],8:[2,19],12:[2,19],19:[2,19],22:[2,19],27:[2,19],29:[1,34],37:[2,19],40:[2,19]},{6:[2,21],8:[2,21],12:[2,21],19:[2,21],22:[2,21],27:[2,21],29:[2,21],31:[1,35],37:[2,21],40:[2,21]},{6:[2,23],8:[2,23],12:[2,23],19:[2,23],22:[2,23],27:[2,23],29:[2,23],31:[2,23],37:[2,23],40:[2,23]},{6:[2,28],8:[2,28],12:[2,28],19:[2,28],22:[2,28],27:[2,28],29:[2,28],31:[2,28],37:[2,28],40:[2,28]},{37:[1,58]},{6:[2,32],8:[2,32],12:[2,32],19:[2,32],22:[2,32],27:[2,32],29:[2,32],31:[2,32],37:[2,32],39:[2,32],40:[2,32]},{37:[2,29],39:[1,59]},{8:[1,61],11:60,12:[2,36]},{6:[2,6],8:[2,6],12:[2,6]},{6:[2,31],8:[2,31],12:[2,31],19:[2,31],22:[2,31],27:[2,31],29:[2,31],31:[2,31],37:[2,31],39:[2,31],40:[2,31]},{17:[1,21],35:55,38:62},{12:[1,63]},{2:[1,7],7:40,9:[1,4],12:[2,37],14:5,17:[1,21],18:6,20:8,21:9,23:[1,10],24:11,25:[1,12],26:13,28:14,30:15,32:16,33:[1,17],34:18,35:19,36:[1,20]},{37:[2,30]},{6:[2,5],8:[2,5],12:[2,5]}],
defaultActions: {39:[2,1],44:[2,8],62:[2,30]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        _handle_error:
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';
                function locateNearestErrorRecoveryRule(state) {
                    var stack_probe = stack.length - 1;
                    var depth = 0;
                    for (;;) {
                        if (TERROR.toString() in table[state]) {
                            return depth;
                        }
                        if (state === 0 || stack_probe < 2) {
                            return false;
                        }
                        stack_probe -= 2;
                        state = stack[stack_probe];
                        ++depth;
                    }
                }
                if (!recovering) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: error_rule_depth !== false
                    });
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }
                if (recovering == 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                    }
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }
                if (error_rule_depth === false) {
                    throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                }
                popStack(error_rule_depth);
                preErrorSymbol = symbol == TERROR ? null : symbol;
                symbol = TERROR;
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3;
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* comments are ignored */
break;
case 1:return 29;
break;
case 2:return 27;
break;
case 3:return 22;
break;
case 4:return 19;
break;
case 5:return 33;
break;
case 6:return 'UNION';
break;
case 7:return 'INTERSECTION';
break;
case 8:return 31;
break;
case 9:return 'EVERY';
break;
case 10:return 16;
break;
case 11:return "OF";
break;
case 12:/* ignore digits, for now */
break;
case 13:
				// Syntax: "[...] : ruleName [[elim/intro] [NumOrRange[, NumOrRange]*]]

				// strip the leading colon and spaces
				yy_.yytext = yy_.yytext.substr(yy_.yytext.substr(1).search(/\S/));

				// find the beginning of the first line number
				yy_.yytext = yy_.yytext.trim();
				var pos = yy_.yytext.search(/\s+\d+/);
				var lineranges = null, name = yy_.yytext;
				if (pos != -1) {
					name = yy_.yytext.substr(0, pos);
					lineranges = yy_.yytext.substr(pos+1).split(/\s*,\s*/);
				}
				var parts = name.split(' ');
				var rtype = null, side = null;
				if (parts[0]) {
					name = parts[0];
					rtype = parts[1];
					if (rtype && (parts = rtype.match(/([a-zA-Z]+)(\d+)/))) {
						rtype = parts[1];
						side = parts[2];
					}
				}
				var sub = name.split('/');
				if (sub.length == 2) {
					name = sub[0];
					sub = sub[1];
				} else {
					sub = null;
				}
				yy_.yytext = [name, rtype, side, lineranges, sub];
				return 40;
				
break;
case 14:return 23;
break;
case 15:return 'IN';
break;
case 16:return 'EMPTYSET';
break;
case 17:return 25;
break;
case 18:return "UNARY_EXT";
break;
case 19:return "BINARY_EXT";
break;
case 20:return 36;
break;
case 21:return 37;
break;
case 22:return 17;
break;
case 23:return 39;
break;
case 24:
				// remaining DEBOXes implied by EOF
				var tokens = [];

				while (this._iemitstack[0]) {
					tokens.unshift("DEBOX");
					this._iemitstack.shift();
				}
				tokens.unshift("ENDOFFILE");
				if (tokens.length) return tokens;
				
break;
case 25: /* manually close an assumption box */
				this._log("MANUAL DEBOX");
				this._iemitstack.shift();
				return ['DEBOX', 'EOL'];
				
break;
case 26:/* eat blank lines */
break;
case 27:
				/* Similar to the idea of semantic whitespace, we keep track of virtual
				 * BOX/DEBOX characters based on a stack of | occurrences
				 */
				    var indentation = (yy_.yytext.match(/\|/g)||[]).length;
				    if (indentation > this._iemitstack[0]) {
					this._iemitstack.unshift(indentation);
					this._log(this.topState(), "BOX", this.stateStackSize());
					this.myBegin(this.topState(), 'deepening, due to indent'); // deepen our current state
					return ['BOX', 'EOL'];
				    }

				    var tokens = ["EOL"];
				    while (indentation < this._iemitstack[0]) {
					this.myPopState();
					this._log(this.topState(), "DEBOX", this.stateStackSize());
					tokens.push("DEBOX");
					this._iemitstack.shift();
				    }
				    if (tokens[tokens.length-1] === "DEBOX")
					    tokens.push("EOL");
				    return tokens;
				
break;
case 28:return 8;
break;
case 29:/* ignore whitespace */
break;
case 30:return 2;
break;
}
},
rules: [/^(?:[\n\r]?#.*)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:implies|->|=>)/,/^(?:iff|<->|=>)/,/^(?:not|~|!)/,/^(?:union\b)/,/^(?:intersection\b)/,/^(?:=)/,/^(?:every\b)/,/^(?:with\b)/,/^(?:of\b)/,/^(?:\d+)/,/^(?:(:.*))/,/^(?:E\.)/,/^(?:in\b)/,/^(?:empty\b)/,/^(?:A\.)/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*)\.)/,/^(?:\.([a-zA-Z_][a-zA-Z_'"0-9\|]*)\.)/,/^(?:\()/,/^(?:\))/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*))/,/^(?:,)/,/^(?:[\n\r]*$)/,/^(?:\n([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*-+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n|^]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\d*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*)/,/^(?:\n)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/,/^(?:.*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
});
var jisonLexerFn = lexer.setInput;
lexer.setInput = function(input) {
        var debug = false;
        this._iemitstack = [0];
        this._log = function() { if (debug) console.log.apply(this, arguments); };
        this.myBegin = function(state, why) { this._log("Begin " + state + " because " + why); this.begin(state); };
        this.myPopState = function() { this._log("Popping " + this.popState() + " to " + this.topState()); };
        return jisonLexerFn.call(this, input);
};;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require('_process'))
},{"_process":36,"fs":34,"path":35}],2:[function(require,module,exports){
(function (process){
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"proof":3,"clause_list":4,"proof_option0":5,"ENDOFFILE":6,"box":7,"EOL":8,"BOX":9,"box_option0":10,"DEBOX":11,"sentence":12,"box_option1":13,"e_imp":14,"e_or":15,"IMPLIES":16,"OR":17,"e_and":18,"AND":19,"e_not":20,"NOT":21,"atom":22,"ID":23,"LPAREN":24,"RPAREN":25,"JUSTIFICATION":26,"$accept":0,"$end":1},
terminals_: {2:"error",6:"ENDOFFILE",8:"EOL",9:"BOX",11:"DEBOX",16:"IMPLIES",17:"OR",19:"AND",21:"NOT",23:"ID",24:"LPAREN",25:"RPAREN",26:"JUSTIFICATION"},
productions_: [0,[3,3],[4,1],[4,3],[4,0],[7,4],[7,2],[12,1],[12,1],[14,3],[14,1],[15,3],[15,1],[18,3],[18,1],[20,2],[20,1],[22,1],[22,3],[5,0],[5,1],[10,0],[10,1],[13,0],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-2]; return this.$; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 4: this.$ = []; 
break;
case 5: this.$ = ['box', $$[$0-2], this._$];
		if ($$[$0-2] && $$[$0-2][0] && $$[$0-2][0][0] == 'rule' && $$[$0-2][0][2].auto)
			$$[$0-2][0][2] = ['assumption', null];
	
break;
case 6: this.$ = $$[$0-1][0] != 'error' ? ['rule', $$[$0-1], $$[$0], this._$] : $$[$0-1];
		if (this.$[0] === 'rule' && !this.$[2]) {
			this.$[2] = ['premise', null];
			this.$[2].auto = true;
		}
	
break;
case 8: this.$ = ['error', yytext]; 
break;
case 9: this.$ = ['->', $$[$0-2], $$[$0]]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = ['or', $$[$0-2], $$[$0]]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = ['and', $$[$0-2], $$[$0]]; 
break;
case 14: this.$ = $$[$0]; 
break;
case 15: this.$ = ['not', $$[$0]]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = ['id', $$[$0]]; 
break;
case 18: this.$ = $$[$0-1]; this.$.userParens = true; 
break;
}
},
table: [{2:[1,7],3:1,4:2,6:[2,4],7:3,8:[2,4],9:[1,4],12:5,14:6,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{1:[3]},{5:15,6:[2,19],8:[1,16]},{6:[2,2],8:[2,2],11:[2,2]},{2:[1,7],4:17,7:3,8:[2,4],9:[1,4],11:[2,4],12:5,14:6,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{6:[2,23],8:[2,23],11:[2,23],13:18,26:[1,19]},{6:[2,7],8:[2,7],11:[2,7],25:[2,7],26:[2,7]},{6:[2,8],8:[2,8],11:[2,8],25:[2,8],26:[2,8]},{6:[2,10],8:[2,10],11:[2,10],16:[1,20],17:[1,21],25:[2,10],26:[2,10]},{6:[2,12],8:[2,12],11:[2,12],16:[2,12],17:[2,12],19:[1,22],25:[2,12],26:[2,12]},{6:[2,14],8:[2,14],11:[2,14],16:[2,14],17:[2,14],19:[2,14],25:[2,14],26:[2,14]},{20:23,21:[1,11],22:12,23:[1,13],24:[1,14]},{6:[2,16],8:[2,16],11:[2,16],16:[2,16],17:[2,16],19:[2,16],25:[2,16],26:[2,16]},{6:[2,17],8:[2,17],11:[2,17],16:[2,17],17:[2,17],19:[2,17],25:[2,17],26:[2,17]},{2:[1,7],12:24,14:6,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{6:[1,25]},{2:[1,7],6:[2,20],7:26,9:[1,4],12:5,14:6,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{8:[1,28],10:27,11:[2,21]},{6:[2,6],8:[2,6],11:[2,6]},{6:[2,24],8:[2,24],11:[2,24]},{14:29,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{18:30,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{20:31,21:[1,11],22:12,23:[1,13],24:[1,14]},{6:[2,15],8:[2,15],11:[2,15],16:[2,15],17:[2,15],19:[2,15],25:[2,15],26:[2,15]},{25:[1,32]},{1:[2,1]},{6:[2,3],8:[2,3],11:[2,3]},{11:[1,33]},{2:[1,7],7:26,9:[1,4],11:[2,22],12:5,14:6,15:8,18:9,20:10,21:[1,11],22:12,23:[1,13],24:[1,14]},{6:[2,9],8:[2,9],11:[2,9],25:[2,9],26:[2,9]},{6:[2,11],8:[2,11],11:[2,11],16:[2,11],17:[2,11],19:[1,22],25:[2,11],26:[2,11]},{6:[2,13],8:[2,13],11:[2,13],16:[2,13],17:[2,13],19:[2,13],25:[2,13],26:[2,13]},{6:[2,18],8:[2,18],11:[2,18],16:[2,18],17:[2,18],19:[2,18],25:[2,18],26:[2,18]},{6:[2,5],8:[2,5],11:[2,5]}],
defaultActions: {25:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        _handle_error:
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';
                function locateNearestErrorRecoveryRule(state) {
                    var stack_probe = stack.length - 1;
                    var depth = 0;
                    for (;;) {
                        if (TERROR.toString() in table[state]) {
                            return depth;
                        }
                        if (state === 0 || stack_probe < 2) {
                            return false;
                        }
                        stack_probe -= 2;
                        state = stack[stack_probe];
                        ++depth;
                    }
                }
                if (!recovering) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: error_rule_depth !== false
                    });
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }
                if (recovering == 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                    }
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }
                if (error_rule_depth === false) {
                    throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                }
                popStack(error_rule_depth);
                preErrorSymbol = symbol == TERROR ? null : symbol;
                symbol = TERROR;
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3;
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* comments are ignored */
break;
case 1:return 19;
break;
case 2:return 17;
break;
case 3:return 16;
break;
case 4:return 21;
break;
case 5:return 'UNION';
break;
case 6:return 'INTERSECTION';
break;
case 7:return 'EQUALS';
break;
case 8:return 'EVERY';
break;
case 9:return 'WITH';
break;
case 10:return "OF";
break;
case 11:/* ignore digits, for now */
break;
case 12:
				// Syntax: "[...] : ruleName [[elim/intro] [NumOrRange[, NumOrRange]*]]

				// strip the leading colon and spaces
				yy_.yytext = yy_.yytext.substr(yy_.yytext.substr(1).search(/\S/));

				// find the beginning of the first line number
				yy_.yytext = yy_.yytext.trim();
				var pos = yy_.yytext.search(/\s+\d+/);
				var lineranges = null, name = yy_.yytext;
				if (pos != -1) {
					name = yy_.yytext.substr(0, pos);
					lineranges = yy_.yytext.substr(pos+1).split(/\s*,\s*/);
				}
				var parts = name.split(' ');
				var rtype = null, side = null;
				if (parts[0]) {
					name = parts[0];
					rtype = parts[1];
					if (rtype && (parts = rtype.match(/([a-zA-Z]+)(\d+)/))) {
						rtype = parts[1];
						side = parts[2];
					}
				}
				var sub = name.split('/');
				if (sub.length == 2) {
					name = sub[0];
					sub = sub[1];
				} else {
					sub = null;
				}
				yy_.yytext = [name, rtype, side, lineranges, sub];
				return 26;
				
break;
case 13:return 'EXISTS';
break;
case 14:return 'IN';
break;
case 15:return 'EMPTYSET';
break;
case 16:return 'FORALL';
break;
case 17:return "UNARY_EXT";
break;
case 18:return "BINARY_EXT";
break;
case 19:return 24;
break;
case 20:return 25;
break;
case 21:return 23;
break;
case 22:return 'COMMA';
break;
case 23:
				// remaining DEBOXes implied by EOF
				var tokens = [];

				while (this._iemitstack[0]) {
					tokens.unshift("DEBOX");
					this._iemitstack.shift();
				}
				tokens.unshift("ENDOFFILE");
				if (tokens.length) return tokens;
				
break;
case 24: /* manually close an assumption box */
				this._log("MANUAL DEBOX");
				this._iemitstack.shift();
				return ['DEBOX', 'EOL'];
				
break;
case 25:/* eat blank lines */
break;
case 26:
				/* Similar to the idea of semantic whitespace, we keep track of virtual
				 * BOX/DEBOX characters based on a stack of | occurrences
				 */
				    var indentation = (yy_.yytext.match(/\|/g)||[]).length;
				    if (indentation > this._iemitstack[0]) {
					this._iemitstack.unshift(indentation);
					this._log(this.topState(), "BOX", this.stateStackSize());
					this.myBegin(this.topState(), 'deepening, due to indent'); // deepen our current state
					return ['BOX', 'EOL'];
				    }

				    var tokens = ["EOL"];
				    while (indentation < this._iemitstack[0]) {
					this.myPopState();
					this._log(this.topState(), "DEBOX", this.stateStackSize());
					tokens.push("DEBOX");
					this._iemitstack.shift();
				    }
				    if (tokens[tokens.length-1] === "DEBOX")
					    tokens.push("EOL");
				    return tokens;
				
break;
case 27:return 8;
break;
case 28:/* ignore whitespace */
break;
case 29:return 2;
break;
}
},
rules: [/^(?:[\n\r]?#.*)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:implies|->|=>)/,/^(?:not|~|!)/,/^(?:union\b)/,/^(?:intersection\b)/,/^(?:=)/,/^(?:every\b)/,/^(?:with\b)/,/^(?:of\b)/,/^(?:\d+)/,/^(?:(:.*))/,/^(?:E\.)/,/^(?:in\b)/,/^(?:empty\b)/,/^(?:A\.)/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*)\.)/,/^(?:\.([a-zA-Z_][a-zA-Z_'"0-9\|]*)\.)/,/^(?:\()/,/^(?:\))/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*))/,/^(?:,)/,/^(?:[\n\r]*$)/,/^(?:\n([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*-+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n|^]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\d*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*)/,/^(?:\n)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/,/^(?:.*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
var jisonLexerFn = lexer.setInput;
lexer.setInput = function(input) {
        var debug = false;
        this._iemitstack = [0];
        this._log = function() { if (debug) console.log.apply(this, arguments); };
        this.myBegin = function(state, why) { this._log("Begin " + state + " because " + why); this.begin(state); };
        this.myPopState = function() { this._log("Popping " + this.popState() + " to " + this.topState()); };
        return jisonLexerFn.call(this, input);
};;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,require('_process'))
},{"_process":36,"fs":34,"path":35}],3:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var VerificationResult_1 = require("./VerificationResult");
var InvalidResult = (function (_super) {
    __extends(InvalidResult, _super);
    function InvalidResult(message) {
        _super.call(this, false, message);
    }
    return InvalidResult;
})(VerificationResult_1.VerificationResult);
exports.InvalidResult = InvalidResult;

},{"./VerificationResult":5}],4:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var VerificationResult_1 = require("./VerificationResult");
var ValidResult = (function (_super) {
    __extends(ValidResult, _super);
    function ValidResult(message) {
        if (message === void 0) { message = "Result is valid."; }
        _super.call(this, true, message);
    }
    return ValidResult;
})(VerificationResult_1.VerificationResult);
exports.ValidResult = ValidResult;

},{"./VerificationResult":5}],5:[function(require,module,exports){
///<reference path="IVerificationResult.ts" />
var VerificationResult = (function () {
    function VerificationResult(Valid, Message, ErrorStep, ErrorMeta) {
        if (Valid === void 0) { Valid = false; }
        if (Message === void 0) { Message = ""; }
        if (ErrorStep === void 0) { ErrorStep = -1; }
        if (ErrorMeta === void 0) { ErrorMeta = null; }
        this.Valid = Valid;
        this.Message = Message;
        this.ErrorStep = ErrorStep;
        this.ErrorMeta = ErrorMeta;
    }
    return VerificationResult;
})();
exports.VerificationResult = VerificationResult;

},{}],6:[function(require,module,exports){

},{}],7:[function(require,module,exports){
///<reference path="IJustification.ts" />

},{}],8:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],9:[function(require,module,exports){
///<reference path="IJustification.ts" />
/**
 * Represents the justification component of a proof line.
 */
var Justification = (function () {
    /**
     * @param ast     Abstract Syntax Tree fragment of the form ['justification',
     *                ['name', 'A.', ['/', 'x', 'y']], 'intro'/'elim', '1'/'2',
     *                [[a], [b,c], ...]]
     */
    function Justification(ast) {
        this.name = ast[1][1];
        this.sub1 = ast[1].length == 3 ? ast[1][2][1] : null;
        this.sub2 = ast[1].length == 3 ? ast[1][2][2] : null;
        this.type = ast[2];
        this.side = ast[3];
        this.lineRefs = ast[4];
    }
    Justification.prototype.ruleName = function () { return this.name; };
    Justification.prototype.substitutionLeft = function () { return this.sub1; };
    Justification.prototype.substitutionRight = function () { return this.sub2; };
    Justification.prototype.ruleType = function () { return this.type; };
    Justification.prototype.sideReference = function () { return this.side; };
    Justification.prototype.lineReferences = function () { return this.lineRefs; };
    return Justification;
})();
exports.Justification = Justification;

},{}],10:[function(require,module,exports){
///<reference path="IJustificationFactory.ts" />
///<reference path="Justification.ts" />
var Justification_1 = require("./Justification");
var JustificationFactory = (function () {
    function JustificationFactory() {
    }
    /**
     * Takes an abstract syntax tree fragment representing a proof justification
     * and returns an instance of the Justification object.
     * @param ast   A justification, e.g., "PBC 1,3-5". For the moment, this
     *              is a lexer-generated string array further parsed by a regex,
     *              not a true AST.
     * @returns     A Justification object.
     */
    JustificationFactory.prototype.buildFromASTFrag = function (ast) {
        var processedAST = this.parseJustification(ast);
        return new Justification_1.Justification(processedAST);
    };
    /**
     * Takes a string representation of a Justification AST and parses it.
     * TODO: Ideally, someday this will be handled via a separate parser with a
     * well-defined, extensible grammar.
     */
    JustificationFactory.prototype.parseJustification = function (why) {
        // input:
        // yytext = [name, rtype, side, lineranges, sub]
        // output:
        // ['justification', ['name', 'A.', ['/', 'x', 'y']], 'intro'/'elim', '1'/'2', [[a], [b,c], ...]]
        var name = this.parseName(why[0], why[4]), jType = why[1], jSide = why[2], jLineRanges = this.parseLineRanges(why[3]);
        return ['justification', name, jType, jSide, jLineRanges];
    };
    JustificationFactory.prototype.parseName = function (jName, sub) {
        var ast = ['name'];
        var nameParts = jName.split('.');
        if (nameParts.length == 2) {
            nameParts[0] = nameParts[0] + ".";
            ast.push(nameParts[0], ['/', nameParts[1], sub]);
        }
        else {
            ast.push(jName);
        }
        return ast;
    };
    JustificationFactory.prototype.parseLineRanges = function (linesRaw) {
        var lines = [];
        for (var rline in linesRaw) {
            var parts = rline.split('-');
            if (parts.length == 2) {
                lines.push([parseInt(parts[0]), parseInt(parts[1])]);
            }
            else {
                lines.push(parseInt(parts[0]));
            }
        }
        return lines;
    };
    return JustificationFactory;
})();
exports.JustificationFactory = JustificationFactory;

},{"./Justification":9}],11:[function(require,module,exports){
/// <reference path='../../_VerifierBase/IRule.ts' />
/// <reference path='../../_VerifierBase/IRulebookFactory.ts' />
var Rules_1 = require("./Rules");
var PLRulebookFactory = (function () {
    function PLRulebookFactory(debug) {
        if (debug === void 0) { debug = function () { }; }
        this.debug = debug;
        this.rules = {
            "premise": new Rules_1.PremiseRule(),
            "assumption": new Rules_1.AssumptionRule(),
            "lem": new Rules_1.LEMRule(),
            "copy": new Rules_1.CopyRule(),
            "mt": new Rules_1.MTRule(),
            "pbc": new Rules_1.PBCRule(),
            "contra": new Rules_1.ContradictionRule(),
            "notnot": new Rules_1.DoubleNegationRule(),
            "->": new Rules_1.ImplicationRule(),
            "and": new Rules_1.AndRule(),
            "or": new Rules_1.OrRule(),
            "not": new Rules_1.NotRule(),
        };
    }
    PLRulebookFactory.prototype.FetchRule = function (name) {
        if (this.rules[name])
            return this.rules[name];
        return null;
    };
    PLRulebookFactory.prototype.BuildRulebook = function () {
        return this.rules;
    };
    return PLRulebookFactory;
})();
exports.PLRulebookFactory = PLRulebookFactory;

},{"./Rules":13}],12:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path='../../_VerifierBase/BaseVerifier'/>
/// <reference path="../../Utility" />
/// <reference path="PLRulebookFactory" />
var Utility_1 = require("../../Utility");
var BaseVerifier_1 = require("../../_VerifierBase/BaseVerifier");
var PLRulebookFactory_1 = require("./PLRulebookFactory");
var PLVerifier = (function (_super) {
    __extends(PLVerifier, _super);
    function PLVerifier() {
        _super.call(this, new Utility_1.Utility(true), new PLRulebookFactory_1.PLRulebookFactory());
    }
    return PLVerifier;
})(BaseVerifier_1.BaseVerifier);
exports.PLVerifier = PLVerifier;

},{"../../Utility":30,"../../_VerifierBase/BaseVerifier":32,"./PLRulebookFactory":11}],13:[function(require,module,exports){
var PremiseRule_1 = require("./Rules/PremiseRule");
exports.PremiseRule = PremiseRule_1.PremiseRule;
var AssumptionRule_1 = require("./Rules/AssumptionRule");
exports.AssumptionRule = AssumptionRule_1.AssumptionRule;
var LEMRule_1 = require("./Rules/LEMRule");
exports.LEMRule = LEMRule_1.LEMRule;
var CopyRule_1 = require("./Rules/CopyRule");
exports.CopyRule = CopyRule_1.CopyRule;
var AndRule_1 = require("./Rules/AndRule");
exports.AndRule = AndRule_1.AndRule;
var MTRule_1 = require("./Rules/MTRule");
exports.MTRule = MTRule_1.MTRule;
var OrRule_1 = require("./Rules/OrRule");
exports.OrRule = OrRule_1.OrRule;
var NotRule_1 = require("./Rules/NotRule");
exports.NotRule = NotRule_1.NotRule;
var PBCRule_1 = require("./Rules/PBCRule");
exports.PBCRule = PBCRule_1.PBCRule;
var DoubleNegationRule_1 = require("./Rules/DoubleNegationRule");
exports.DoubleNegationRule = DoubleNegationRule_1.DoubleNegationRule;
var ContradictionRule_1 = require("./Rules/ContradictionRule");
exports.ContradictionRule = ContradictionRule_1.ContradictionRule;
var ImplicationRule_1 = require("./Rules/ImplicationRule");
exports.ImplicationRule = ImplicationRule_1.ImplicationRule;

},{"./Rules/AndRule":14,"./Rules/AssumptionRule":15,"./Rules/ContradictionRule":16,"./Rules/CopyRule":17,"./Rules/DoubleNegationRule":18,"./Rules/ImplicationRule":19,"./Rules/LEMRule":20,"./Rules/MTRule":21,"./Rules/NotRule":22,"./Rules/OrRule":23,"./Rules/PBCRule":24,"./Rules/PremiseRule":25}],14:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var AndRule = (function (_super) {
    __extends(AndRule, _super);
    function AndRule() {
        _super.apply(this, arguments);
        this.introFormat = new ReasonFormat_1.ReasonFormat(true, ["num"], false);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num", "num"], false);
    }
    Object.defineProperty(AndRule.prototype, "Name", {
        get: function () { return "And"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AndRule.prototype, "Type", {
        get: function () { return "normal"; },
        enumerable: true,
        configurable: true
    });
    AndRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            return this.introFormat;
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    AndRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return this.IntroVerifier(proof, step, partRef, stepRefs);
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    AndRule.prototype.IntroVerifier = function (proof, step, partRef, stepRefs) {
        var s = proof.Steps[step].Expression;
        if (s[0] !== 'and')
            return new InvalidResult_1.InvalidResult("And-Intro: Current step is not an 'and'-expression.");
        if (this.semanticEq(s[1], proof.Steps[stepRefs[0][0]].Expression)) {
            if (this.semanticEq(s[2], proof.Steps[stepRefs[1][0]].Expression))
                return new ValidResult_1.ValidResult();
            return new InvalidResult_1.InvalidResult("And-Intro: Right side doesn't match referenced step.");
        }
        return new InvalidResult_1.InvalidResult("And-Intro: Left side doesn't match referenced step.");
    };
    AndRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var andExp = proof.Steps[stepRefs[0][0]].Expression;
        if (andExp[0] != 'and')
            return new InvalidResult_1.InvalidResult("And-Elim: Referenced step is not an 'and' expression.");
        if (!this.semanticEq(andExp[partRef], proof.Steps[step].Expression))
            return new InvalidResult_1.InvalidResult("And-Elim: In referenced line, side " + partRef + " does not match current step.");
        return new ValidResult_1.ValidResult();
    };
    return AndRule;
})(RuleBase_1.RuleBase);
exports.AndRule = AndRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],15:[function(require,module,exports){
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../_VerifierBase/IReasonFormat.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var AssumptionRule = (function (_super) {
    __extends(AssumptionRule, _super);
    function AssumptionRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, null, false);
    }
    Object.defineProperty(AssumptionRule.prototype, "Name", {
        get: function () { return "Assumption"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssumptionRule.prototype, "Type", {
        get: function () { return "simple"; },
        enumerable: true,
        configurable: true
    });
    AssumptionRule.prototype.ReasonFormat = function () { return this.format; };
    AssumptionRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        if (!proof.Steps[step].isFirstStmt)
            return new InvalidResult_1.InvalidResult("Assumptions can only be made at the start of an assumption box.");
        return new ValidResult_1.ValidResult();
    };
    return AssumptionRule;
})(RuleBase_1.RuleBase);
exports.AssumptionRule = AssumptionRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],16:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var ContradictionRule = (function (_super) {
    __extends(ContradictionRule, _super);
    function ContradictionRule() {
        _super.apply(this, arguments);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num"], false);
    }
    Object.defineProperty(ContradictionRule.prototype, "Name", {
        get: function () { return "Contradiction"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContradictionRule.prototype, "Type", {
        get: function () { return "normal"; },
        enumerable: true,
        configurable: true
    });
    ContradictionRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            throw new Error("Contradiction does not have an intro rule. Did you mean not elimination?");
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    ContradictionRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return new InvalidResult_1.InvalidResult("Contradiction does not have an intro rule. Did you mean not elimination?");
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    ContradictionRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var refStep = proof.Steps[stepRefs[0][0]].Expression;
        if (refStep[0] != 'id' || (refStep[1] != 'contradiction' && refStep[1] != '_|_'))
            return new InvalidResult_1.InvalidResult("Contra-elim: Referenced step is not a contradiction.");
        return new ValidResult_1.ValidResult();
    };
    return ContradictionRule;
})(RuleBase_1.RuleBase);
exports.ContradictionRule = ContradictionRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],17:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var CopyRule = (function (_super) {
    __extends(CopyRule, _super);
    function CopyRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, ["num"], false);
    }
    Object.defineProperty(CopyRule.prototype, "Name", {
        get: function () { return "COPY"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CopyRule.prototype, "Type", {
        get: function () { return "derived"; },
        enumerable: true,
        configurable: true
    });
    CopyRule.prototype.ReasonFormat = function (type) { return this.format; };
    CopyRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var curStep = proof.Steps[step].Expression;
        var refStep = proof.Steps[stepRefs[0][0]].Expression;
        if (!this.semanticEq(curStep, refStep))
            return new InvalidResult_1.InvalidResult("Copy: Current step is not semantically equalivalent to the referenced step.");
        return new ValidResult_1.ValidResult();
    };
    return CopyRule;
})(RuleBase_1.RuleBase);
exports.CopyRule = CopyRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],18:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var DoubleNegationRule = (function (_super) {
    __extends(DoubleNegationRule, _super);
    function DoubleNegationRule() {
        _super.apply(this, arguments);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num", "num"], false);
        this.introFormat = new ReasonFormat_1.ReasonFormat(true, ["num"], false);
    }
    Object.defineProperty(DoubleNegationRule.prototype, "Name", {
        get: function () { return "DoubleNegation"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DoubleNegationRule.prototype, "Type", {
        get: function () { return "derived"; },
        enumerable: true,
        configurable: true
    });
    DoubleNegationRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            throw new Error("Double-negation doesn't have an intro rule.");
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    DoubleNegationRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return new InvalidResult_1.InvalidResult("Double-negation doesn't have an intro rule.");
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    DoubleNegationRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var curStep = proof.Steps[step].Expression;
        var refStep = proof.Steps[stepRefs[0][0]].Expression;
        if (refStep[0] !== 'not' || refStep[1][0] !== 'not')
            return new InvalidResult_1.InvalidResult("Notnot-elim: Referenced step is not a double-negation.");
        if (!this.semanticEq(refStep[1][1], curStep))
            return new InvalidResult_1.InvalidResult("Notnot-elim: Does not result in current step.");
        return new ValidResult_1.ValidResult();
    };
    return DoubleNegationRule;
})(RuleBase_1.RuleBase);
exports.DoubleNegationRule = DoubleNegationRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],19:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var ImplicationRule = (function (_super) {
    __extends(ImplicationRule, _super);
    function ImplicationRule() {
        _super.apply(this, arguments);
        this.introFormat = new ReasonFormat_1.ReasonFormat(false, ["range"], false);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num", "num"], false);
    }
    Object.defineProperty(ImplicationRule.prototype, "Name", {
        get: function () { return "Implication"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImplicationRule.prototype, "Type", {
        get: function () { return "normal"; },
        enumerable: true,
        configurable: true
    });
    ImplicationRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            return this.introFormat;
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    ImplicationRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return this.IntroVerifier(proof, step, partRef, stepRefs);
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    ImplicationRule.prototype.IntroVerifier = function (proof, step, partRef, stepRefs) {
        var truth = proof.Steps[stepRefs[0][0]].Expression;
        var result = proof.Steps[stepRefs[0][1]].Expression;
        var implies = proof.Steps[step].Expression;
        if (implies[0] != '->')
            return new InvalidResult_1.InvalidResult("Implies-Intro: Current step is not an implication");
        var truthSemEq = this.semanticEq(implies[1], truth);
        if (!truthSemEq)
            return new InvalidResult_1.InvalidResult("Implies-Intro: The left side does not match the assumption.");
        var resultSemEq = this.semanticEq(implies[2], result);
        if (!resultSemEq)
            return new InvalidResult_1.InvalidResult("Implies-Intro: The result does not match the right side.");
        return new ValidResult_1.ValidResult();
    };
    ImplicationRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var truthStep = stepRefs[1][0], impliesStep = stepRefs[0][0];
        var truth = proof.Steps[truthStep].Expression;
        var implies = proof.Steps[impliesStep].Expression;
        if (implies[0] != '->')
            return new InvalidResult_1.InvalidResult("Implies-Elim: Step " + stepRefs[0][0] + " is not an implication");
        var truthSemEq = this.semanticEq(implies[1], truth);
        var resultSemEq = this.semanticEq(implies[2], proof.Steps[step].Expression);
        if (!truthSemEq)
            return new InvalidResult_1.InvalidResult("Implies-Elim: The implication's left side does not match the referenced step.");
        if (!resultSemEq)
            return new InvalidResult_1.InvalidResult("Implies-Elim: The left side does not imply this result.");
        return new ValidResult_1.ValidResult();
    };
    return ImplicationRule;
})(RuleBase_1.RuleBase);
exports.ImplicationRule = ImplicationRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],20:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var LEMRule = (function (_super) {
    __extends(LEMRule, _super);
    function LEMRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, null, false);
    }
    Object.defineProperty(LEMRule.prototype, "Name", {
        get: function () { return "LEM"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LEMRule.prototype, "Type", {
        get: function () { return "derived"; },
        enumerable: true,
        configurable: true
    });
    LEMRule.prototype.ReasonFormat = function (type) { return this.format; };
    LEMRule.prototype.Exec = function (proof, step) {
        var s = proof.Steps[step].Expression;
        if (s[0] !== "or")
            return new InvalidResult_1.InvalidResult("LEM: must be of the form phi or not phi.");
        var left = s[1], right = s[2];
        if (right[0] !== "not" || !this.semanticEq(left, right[1]))
            return new InvalidResult_1.InvalidResult("LEM: right side must be negation of left.");
        return new ValidResult_1.ValidResult();
    };
    return LEMRule;
})(RuleBase_1.RuleBase);
exports.LEMRule = LEMRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],21:[function(require,module,exports){
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../_VerifierBase/IReasonFormat.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var MTRule = (function (_super) {
    __extends(MTRule, _super);
    function MTRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, ["num", "num"], false);
    }
    Object.defineProperty(MTRule.prototype, "Name", {
        get: function () { return "MT"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTRule.prototype, "Type", {
        get: function () { return "derived"; },
        enumerable: true,
        configurable: true
    });
    MTRule.prototype.ReasonFormat = function () { return this.format; };
    MTRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var impStep = proof.Steps[stepRefs[0][0]].Expression;
        if (impStep[0] !== "->")
            return new InvalidResult_1.InvalidResult("MT: 1st referenced step must be implication.");
        var left = impStep[1], right = impStep[2];
        var negStep = proof.Steps[stepRefs[1][0]].Expression;
        if (negStep[0] !== "not" || !this.semanticEq(negStep[1], right))
            return new InvalidResult_1.InvalidResult("MT: 2nd ref step must be negation of right side of 1st ref step.");
        var s = proof.Steps[step].Expression;
        if (s[0] !== 'not' || !this.semanticEq(left, s[1]))
            return new InvalidResult_1.InvalidResult("MT: current step must be negation of left side of ref step.");
        return new ValidResult_1.ValidResult();
    };
    return MTRule;
})(RuleBase_1.RuleBase);
exports.MTRule = MTRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],22:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var NotRule = (function (_super) {
    __extends(NotRule, _super);
    function NotRule() {
        _super.apply(this, arguments);
        this.introFormat = new ReasonFormat_1.ReasonFormat(false, ["range"], false);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num", "num"], false);
    }
    Object.defineProperty(NotRule.prototype, "Name", {
        get: function () { return "Not"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotRule.prototype, "Type", {
        get: function () { return "normal"; },
        enumerable: true,
        configurable: true
    });
    NotRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            return this.introFormat;
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    NotRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return this.IntroVerifier(proof, step, partRef, stepRefs);
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    NotRule.prototype.IntroVerifier = function (proof, step, partRef, stepRefs) {
        var assumptionExpr = proof.Steps[stepRefs[0][0]].Expression;
        var contraExpr = proof.Steps[stepRefs[0][1]].Expression;
        if (!this.isContradiction(contraExpr)) {
            return new InvalidResult_1.InvalidResult("Not-Intro: Final step in range must be a contradiction.");
        }
        var curStep = proof.Steps[step].Expression;
        if (curStep[0] !== 'not')
            return new InvalidResult_1.InvalidResult("Not-Intro: Current step is not a negation. Might you be thinking of PBC?");
        if (!this.semanticEq(assumptionExpr, curStep[1]))
            return new InvalidResult_1.InvalidResult("Not-Intro: Negation of assumption doesn't match current step.");
        return new ValidResult_1.ValidResult();
    };
    NotRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var s = proof.Steps[step].Expression;
        if (!this.isContradiction(s))
            return new InvalidResult_1.InvalidResult("Not-Elim: Current step is not a contradiction.");
        var step1expr = proof.Steps[stepRefs[0][0]].Expression;
        var step2expr = proof.Steps[stepRefs[1][0]].Expression;
        var semEq;
        if (step1expr[0] === 'not') {
            semEq = this.semanticEq(step1expr[1], step2expr);
        }
        else if (step2expr[0] === 'not') {
            semEq = this.semanticEq(step2expr[1], step1expr);
        }
        else {
            return new InvalidResult_1.InvalidResult("Not-Elim: Neither referenced proof step is a 'not' expression.");
        }
        if (!semEq)
            return new InvalidResult_1.InvalidResult("Not-Elim: Subexpression in not-expr does not match other expr.");
        return new ValidResult_1.ValidResult();
    };
    return NotRule;
})(RuleBase_1.RuleBase);
exports.NotRule = NotRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],23:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var OrRule = (function (_super) {
    __extends(OrRule, _super);
    function OrRule() {
        _super.apply(this, arguments);
        this.introFormat = new ReasonFormat_1.ReasonFormat(true, ["num"], false);
        this.elimFormat = new ReasonFormat_1.ReasonFormat(false, ["num", "range", "range"], false);
    }
    Object.defineProperty(OrRule.prototype, "Name", {
        get: function () { return "Or"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrRule.prototype, "Type", {
        get: function () { return "normal"; },
        enumerable: true,
        configurable: true
    });
    OrRule.prototype.ReasonFormat = function (type) {
        if (type === "intro")
            return this.introFormat;
        if (type === "elim")
            return this.elimFormat;
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    OrRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var type = proof.Steps[step].Justification.ruleType;
        if (type === "intro")
            return this.IntroVerifier(proof, step, partRef, stepRefs);
        if (type === "elim")
            return this.ElimVerifier(proof, step, partRef, stepRefs);
        throw new Error("Unknown " + this.Name + " variation " + type + ".");
    };
    OrRule.prototype.IntroVerifier = function (proof, step, partRef, stepRefs) {
        var s = proof.Steps[step].Expression;
        if (s[0] !== 'or')
            return new InvalidResult_1.InvalidResult("Or-Intro: Current step is not an 'or'-expression.");
        if (!this.semanticEq(s[partRef], proof.Steps[stepRefs[0][0]].Expression))
            return new InvalidResult_1.InvalidResult("Or-Intro: Side " + partRef + " doesn't match referenced step.");
        return new ValidResult_1.ValidResult();
    };
    OrRule.prototype.ElimVerifier = function (proof, step, partRef, stepRefs) {
        var currStepExpr = proof.Steps[step].Expression;
        // FIXME: What potential is there here for false valids? Can we build a custom
        // stepRefs that will break this?
        var orStepExpr = proof.Steps[stepRefs[0][0]].Expression;
        var a1p1Expr = proof.Steps[stepRefs[1][0]].Expression;
        var a1p2Expr = proof.Steps[stepRefs[1][1]].Expression;
        var a2p1Expr = proof.Steps[stepRefs[2][0]].Expression;
        var a2p2Expr = proof.Steps[stepRefs[2][1]].Expression;
        // and through the gauntlet...
        if (orStepExpr[0] !== 'or')
            return new InvalidResult_1.InvalidResult("Or-Elim: First referenced step is not an 'or'-expression.");
        if (!this.semanticEq(orStepExpr[1], a1p1Expr))
            return new InvalidResult_1.InvalidResult("Or-Elim: First range intro doesn't match left side of 'or'.");
        if (!this.semanticEq(orStepExpr[2], a2p1Expr))
            return new InvalidResult_1.InvalidResult("Or-Elim: Second range range intro doesn't match right side of 'or'.");
        if (!this.semanticEq(a1p2Expr, a2p2Expr))
            return new InvalidResult_1.InvalidResult("Or-Elim: Step range conclusions don't match.");
        if (!this.semanticEq(a1p2Expr, currStepExpr))
            return new InvalidResult_1.InvalidResult("Or-Elim: Current step doesn't match step range conclusions.");
        return new ValidResult_1.ValidResult();
    };
    return OrRule;
})(RuleBase_1.RuleBase);
exports.OrRule = OrRule;

},{"../../../Data/InvalidResult":3,"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],24:[function(require,module,exports){
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../_VerifierBase/IReasonFormat.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var InvalidResult_1 = require("../../../Data/InvalidResult");
var RuleBase_1 = require("../../RuleBase");
var PBCRule = (function (_super) {
    __extends(PBCRule, _super);
    function PBCRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, ["range"], false);
    }
    Object.defineProperty(PBCRule.prototype, "Name", {
        get: function () { return "PBC"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PBCRule.prototype, "Type", {
        get: function () { return "derived"; },
        enumerable: true,
        configurable: true
    });
    PBCRule.prototype.ReasonFormat = function () { return this.format; };
    PBCRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        var assumptionExpr = proof.Steps[stepRefs[0][0]].Expression;
        var contraExpr = proof.Steps[stepRefs[0][1]].Expression;
        if (!this.isContradiction(contraExpr))
            return new InvalidResult_1.InvalidResult("PBC: Final step in range must be a contradiction.");
        if (assumptionExpr[0] !== 'not')
            return new InvalidResult_1.InvalidResult("PBC: Assumption is not a negation. Might you be thinking of not-introduction?");
        var semEq = this.semanticEq(assumptionExpr[1], proof.Steps[step].Expression);
        if (!semEq)
            return new InvalidResult_1.InvalidResult("PBC: Negation of assumption doesn't match current step.");
    };
    return PBCRule;
})(RuleBase_1.RuleBase);
exports.PBCRule = PBCRule;

},{"../../../Data/InvalidResult":3,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],25:[function(require,module,exports){
///<reference path="../../../_VerifierBase/IRule.ts" />
///<reference path="../../../Data/IProof.ts" />
///<reference path="../../../Data/IVerificationResult.ts" />
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReasonFormat_1 = require("../../../_VerifierBase/ReasonFormat");
var ValidResult_1 = require("../../../Data/ValidResult");
var RuleBase_1 = require("../../RuleBase");
var PremiseRule = (function (_super) {
    __extends(PremiseRule, _super);
    function PremiseRule() {
        _super.apply(this, arguments);
        this.format = new ReasonFormat_1.ReasonFormat(false, null, false);
    }
    Object.defineProperty(PremiseRule.prototype, "Name", {
        get: function () { return "Premise"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PremiseRule.prototype, "Type", {
        get: function () { return "simple"; },
        enumerable: true,
        configurable: true
    });
    PremiseRule.prototype.ReasonFormat = function (type) { return this.format; };
    PremiseRule.prototype.Exec = function (proof, step, partRef, stepRefs) {
        return new ValidResult_1.ValidResult();
    };
    return PremiseRule;
})(RuleBase_1.RuleBase);
exports.PremiseRule = PremiseRule;

},{"../../../Data/ValidResult":4,"../../../_VerifierBase/ReasonFormat":33,"../../RuleBase":26}],26:[function(require,module,exports){
///<reference path="../_VerifierBase/IRule.ts" />
///<reference path="../_VerifierBase/IReasonFormat.ts" />
var RuleBase = (function () {
    function RuleBase() {
    }
    Object.defineProperty(RuleBase.prototype, "Name", {
        get: function () { return "RuleBase"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuleBase.prototype, "Type", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    RuleBase.prototype.ReasonFormat = function (type) {
        throw new Error("Unimplemented for rule " + this.Name);
    };
    RuleBase.prototype.Exec = function (proof, step, partRef, stepRefs) {
        throw new Error("Unimplemented for rule " + this.Name);
    };
    RuleBase.prototype.substitute = function (startExpr, a, b, bound) {
        //this.debug("substitute", startExpr, a, b);
        bound = bound ? bound : [];
        var binOps = ["->", "and", "or", "<->", "="];
        var unOps = ["not", "forall", "exists"];
        // remove parens, which are basically stylistic no-ops
        while (startExpr[0] === 'paren')
            startExpr = startExpr[1];
        if (this.arrayContains(binOps, startExpr[0])) {
            var leftSide = this.substitute(startExpr[1], a, b);
            var rightSide = this.substitute(startExpr[2], a, b);
            return [startExpr[0], leftSide, rightSide];
        }
        else if (this.arrayContains(unOps, startExpr[0])) {
            if (startExpr[0] === "forall" || startExpr[0] === "exists") {
                bound = bound.slice(0);
                bound.push(startExpr[1]);
                return [startExpr[0], startExpr[1],
                    this.substitute(startExpr[2], a, b, bound)];
            }
            return [startExpr[0], this.substitute(startExpr[1], a, b, bound)];
        }
        else if (startExpr[0] === 'id') {
            if (startExpr.length === 2) {
                if (!this.arrayContains(bound, startExpr[1])) {
                    if (startExpr[1] === a)
                        return [startExpr[0], b];
                }
                return startExpr;
            }
            if (startExpr.length === 3) {
                var newTerms = [];
                for (var i = 0; i < startExpr[2].length; i++) {
                    newTerms.push(this.substitute(startExpr[2][i], a, b, bound));
                }
                return [startExpr[0], startExpr[1], newTerms];
            }
            throw Error("Unexpected AST format.");
        }
    };
    /**
     * Determines whether two expressions are semantically equivalent
     * under the given (and optional) substitution.
     * a, b - abstract syntax trees of the expressions to be compared.
     * suba, subb (optional) - does comparison after substituting suba in a with subb.
     */
    RuleBase.prototype.semanticEq = function (A, B, suba, subb) {
        //this.debug("semanticEq", A, B);
        var bound = {}, sub;
        if (suba) {
            return this._recSemanticEq(true, suba, subb, A, B, {});
        }
        else {
            return this._recSemanticEq(false, suba, subb, A, B);
        }
    };
    RuleBase.prototype._recSemanticEq = function (sub, suba, subb, a, b, bound) {
        var binOps = ["->", "and", "or", "<->", "="];
        var unOps = ["not"];
        // if eq w/substitution, return true, otherwise continue
        if (sub && this.semanticEq(a, suba)) {
            if ((a[0] !== 'id' || !bound[a[1]]) && this._recSemanticEq(sub, suba, subb, subb, b, bound))
                return true;
        }
        if (this.arrayContains(binOps, a[0]) && a[0] === b[0]) {
            if (this._recSemanticEq(sub, suba, subb, a[1], b[1], bound) && this._recSemanticEq(sub, suba, subb, a[2], b[2], bound)) {
                return true;
            }
            return false;
        }
        else if (this.arrayContains(unOps, a[0]) && a[0] === b[0]) {
            if (this._recSemanticEq(sub, suba, subb, a[1], b[1], bound)) {
                return true;
            }
            return false;
        }
        else if (a[0] === 'exists' || a[0] === 'forall' && a[0] === b[0]) {
            var newb;
            if (sub) {
                newb = this.clone(bound);
                newb[a[1]] = true;
            }
            if (this._recSemanticEq(sub, suba, subb, a[2], b[2], newb)) {
                return true;
            }
            return false;
        }
        else if (a[0] === "id") {
            if (b && a[1] !== b[1])
                return false;
            if (a.length == 2 && b.length == 2) {
                return true;
            }
            if (a.length == 3 && b.length == 3) {
                if (a[2].length != b[2].length) {
                    return false;
                }
                for (var i = 0; i < a[2].length; i++) {
                    if (!this._recSemanticEq(sub, suba, subb, a[2][i], b[2][i], bound)) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    RuleBase.prototype.isContradiction = function (s) {
        return (s[0] === 'id' && (s[1] === '_|_' || s[1] === 'contradiction'));
    };
    RuleBase.prototype.arrayContains = function (arr, el) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === el)
                return true;
        }
        return false;
    };
    RuleBase.prototype.clone = function (obj) {
        var newo = {};
        for (var k in Object.keys(obj)) {
            newo[k] = obj[k];
        }
        return newo;
    };
    return RuleBase;
})();
exports.RuleBase = RuleBase;

},{}],27:[function(require,module,exports){
///<reference path='Statement.ts' />;
var Proof = (function () {
    function Proof() {
        this.Steps = new Array();
    }
    return Proof;
})();
exports.Proof = Proof;

},{}],28:[function(require,module,exports){
///<reference path='Proof.ts' />
///<reference path='Statement.ts' />;
///<reference path='JustificationFactory.ts' />
///<reference path='IJustificationFactory.ts' />
///<reference path='Justification.ts' />
var JustificationFactory_1 = require("./JustificationFactory");
var Proof_1 = require("./Proof");
var Statement_1 = require("./Statement");
/**
 * Given a proof represented as an Abstract Syntax Tree output by our parser,
 * preprocess it and return an object-oriented representation for consumption
 * by our verifier.
 */
var ProofFactory = (function () {
    function ProofFactory() {
        this.justificationFactory = new JustificationFactory_1.JustificationFactory();
    }
    /**
     * Preprocesses an AST into a Proof object. Among other things, it generates
     * variable scopes for assumption boxes.
     * @param ast   An Abstract Syntax Tree returned by the proof parser.
     * @return      An object of type Proof.
     */
    ProofFactory.prototype.preprocess = function (ast) {
        var proof = new Proof_1.Proof();
        this.preprocessBox(proof, ast, 0, []);
        return proof;
    };
    ProofFactory.prototype.preprocessBox = function (proof, ast, step, scope) {
        for (var i = 0; i < ast.length; i++) {
            if (ast[i][0] === 'rule') {
                var justif = this.justificationFactory.buildFromASTFrag(ast[i][2]);
                proof.Steps[step] = new Statement_1.Statement(ast[i][1], justif, scope, ast[i][3], i == 0, i == ast.length - 1);
                step = step + 1;
            }
            else if (ast[i][0] === 'folbox') {
                var newScope = scope.slice(0);
                newScope.push(ast[i][2][1]);
                step = this.preprocessBox(proof, ast[i][1], step, newScope);
            }
            else if (ast[i][0] === 'box') {
                var newScope = scope.slice(0);
                newScope.push(null);
                step = this.preprocessBox(proof, ast[i][1], step, newScope);
            }
            else if (ast[i][0] === 'error') {
                proof.Steps[step] = ast[i];
            }
        }
        return step;
    };
    return ProofFactory;
})();
exports.ProofFactory = ProofFactory;

},{"./JustificationFactory":10,"./Proof":27,"./Statement":29}],29:[function(require,module,exports){
var Statement = (function () {
    function Statement(sentenceAST, justification, scope, loc, isFirst, isLast) {
        this.sentenceAST = sentenceAST;
        this.justification = justification;
        this.scope = scope;
        this.loc = loc;
        this.isFirst = isFirst;
        this.isLast = isLast;
    }
    Object.defineProperty(Statement.prototype, "isFirstStmt", {
        get: function () { return this.isFirst; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "isLastStmt", {
        get: function () { return this.isLast; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "Sentence", {
        get: function () { return this.sentenceAST; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "Scope", {
        get: function () { return this.scope; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "Justification", {
        get: function () { return this.justification; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Statement.prototype, "Meta", {
        get: function () { return this.loc; },
        enumerable: true,
        configurable: true
    });
    return Statement;
})();
exports.Statement = Statement;

},{}],30:[function(require,module,exports){
var Utility = (function () {
    function Utility(debugMode) {
        if (debugMode === void 0) { debugMode = true; }
        this.debugMode = debugMode;
    }
    Utility.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (this.debugMode)
            console.log.apply(console, Array.prototype.slice.call(arguments));
    };
    return Utility;
})();
exports.Utility = Utility;

},{}],31:[function(require,module,exports){
/// <reference path="Logics/FOL/FOLVerifier" />
//import { FOLVerifier } from "./Logics/FOL/FOLVerifier";
var PLVerifier_1 = require("./Logics/PL/PLVerifier");
exports.PLVerifier = PLVerifier_1.PLVerifier;

},{"./Logics/PL/PLVerifier":12}],32:[function(require,module,exports){
///<reference path='IRulebookFactory.ts' />
///<reference path='../IUtility.ts' />
///<reference path='../Data/VerificationResult.ts' />
///<reference path='../Data/Proof.ts' />
///<reference path='../Data/IJustification.ts' />
var VerificationResult_1 = require("../Data/VerificationResult");
var ValidResult_1 = require("../Data/ValidResult");
var BaseVerifier = (function () {
    function BaseVerifier(util, rulebookFactory) {
        this.util = util;
        this.log = util.debug;
        this.rulebookFactory = rulebookFactory;
    }
    BaseVerifier.prototype.Verify = function (proof) {
        for (var i = 0; i < proof.Steps.length; i++) {
            var result = this.ValidateStatement(proof, i);
            if (!result.Valid)
                return result;
        }
        return new VerificationResult_1.VerificationResult(true, "Proof is valid.");
    };
    BaseVerifier.prototype.ValidateStatement = function (proof, step) {
        var stmt = proof.Steps[step];
        if (stmt[0] === 'error')
            return new VerificationResult_1.VerificationResult(false, "Proof invalid due to syntax errors.", step + 1);
        var validator = this.rulebookFactory.FetchRule(stmt.Justification.ruleName);
        if (validator == null)
            return new VerificationResult_1.VerificationResult(false, "Rule not found: " + stmt.Justification + ".");
        var type = proof.Steps[step].Justification.ruleType;
        var formatResult = this.CheckFormat(validator.ReasonFormat(type), proof, step);
        if (!formatResult.Valid)
            return formatResult;
        var partRef = proof.Steps[step].Justification.sideReference;
        var stepRefs = proof.Steps[step].Justification.lineReferences;
        return validator.Exec(proof, step, partRef, stepRefs);
    };
    BaseVerifier.prototype.CheckFormat = function (format, proof, step) {
        this.log("%j %j", proof, step);
        if (step < 0 || step > proof.Steps.length - 1)
            return new VerificationResult_1.VerificationResult(false, "Step " + (step + 1) + " out of range (1 - " + proof.Steps.length + ").");
        var vCheck = this.checkParams(format, proof, step);
        if (vCheck !== true) {
            vCheck += " " + proof.Steps[step].Justification;
            return new VerificationResult_1.VerificationResult(false, vCheck, step + 1);
        }
        return new ValidResult_1.ValidResult();
    };
    BaseVerifier.prototype.checkParams = function (format, proof, step) {
        var justification = proof.Steps[step].Justification;
        console.log("%j %j", justification, format);
        if (format.isParameterless) {
            if (justification.hasLineReferences || justification.hasSubstitution || justification.hasSideReference)
                return "Justification '" + justification.ruleName + "' does not permit parameters.";
        }
        var steps = justification.lineRefs;
        var partNum = justification.sideReference;
        var subst = justification.substitution;
        if (format.HasPart) {
            if (!(partNum == 1 || partNum == 2))
                return "Part number must be 1 or 2";
        }
        else if (justification.hasSideReference)
            return "Step part (e.g., 2 in 'and e2') not applicable, in this context.";
        if (format.StepRefs) {
            if (steps.length != format.StepRefs.length) {
                var f = format.StepRefs
                    .map(function (e) { return e == "num" ? "n" : "n-m"; });
                return "Step reference mismatch; required format: " + f.join(", ") + ".";
            }
            for (var i = 0; i < steps.length; i++) {
                if (format.StepRefs[i] == "num") {
                    if (steps[i].length != 1)
                        return "Step reference #" + (i + 1) + " must be a single number.";
                    var n = steps[i][0];
                    if (!(n >= 0 && n < step))
                        return "Step reference #" + (i + 1) + " to line " + n + " must be 1 <= step < current.";
                }
                else {
                    var ab = steps[i];
                    if (ab.length != 2)
                        return "Step reference #" + (i + 1) + " must be range, a-b, with a <= b.";
                    if (ab[0] > ab[1] || Math.max(ab[0], ab[1]) >= step)
                        return "Step reference #" + (i + 1) + " must be range, a-b, with a <= b.";
                }
            }
        }
        else if (justification.hasLineReference) {
            return "Step references not applicable, here.";
        }
        if (format.Substitution) {
            if (!subst)
                return "Substitution specification required (e.g., A.x/x0 intro n-m)";
            if (subst.length != 2)
                return "Substitution format must have two components (e.g., A.x/x0 intro n-m.)";
        }
        else if (justification.hasSubstitution) {
            return "Substitution not applicable, here.";
        }
        return true;
    };
    return BaseVerifier;
})();
exports.BaseVerifier = BaseVerifier;

},{"../Data/ValidResult":4,"../Data/VerificationResult":5}],33:[function(require,module,exports){
///<reference path="IReasonFormat" />
// format = { hasPart : (true/false), stepRefs : ("num" | "range")*, subst : (true/false) };
var ReasonFormat = (function () {
    function ReasonFormat(HasPart, StepRefs, // ("num" | "range")*
        Substitution) {
        this.HasPart = HasPart;
        this.StepRefs = StepRefs;
        this.Substitution = Substitution;
    }
    ;
    Object.defineProperty(ReasonFormat.prototype, "isParameterless", {
        get: function () { return !this.HasPart && this.StepRefs == null && !this.Substitution; },
        enumerable: true,
        configurable: true
    });
    return ReasonFormat;
})();
exports.ReasonFormat = ReasonFormat;

},{}],34:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],35:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":36}],36:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[6,7,8,9,10,27,28,29,30,31,1,2])(31)
});