/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var folproofParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"proof":3,"clause_list":4,"proof_option0":5,"ENDOFFILE":6,"box":7,"EOL":8,"BOX":9,"with":10,"DEBOX":11,"sentence":12,"box_option0":13,"WITH":14,"ID":15,"OF":16,"e_quant":17,"e_iff":18,"FORALL":19,"EXISTS":20,"e_imp":21,"IFF":22,"e_and":23,"IMPLIES":24,"e_or":25,"AND":26,"e_eq":27,"OR":28,"e_not":29,"EQUALS":30,"NOT":31,"atom":32,"term":33,"LPAREN":34,"RPAREN":35,"term_list":36,"COMMA":37,"infix_term":38,"JUSTIFICATION":39,"$accept":0,"$end":1},
terminals_: {2:"error",6:"ENDOFFILE",8:"EOL",9:"BOX",11:"DEBOX",14:"WITH",15:"ID",16:"OF",19:"FORALL",20:"EXISTS",22:"IFF",24:"IMPLIES",26:"AND",28:"OR",30:"EQUALS",31:"NOT",34:"LPAREN",35:"RPAREN",37:"COMMA",39:"JUSTIFICATION"},
productions_: [0,[3,3],[4,1],[4,3],[7,6],[7,4],[7,2],[10,4],[12,1],[12,1],[17,3],[17,3],[18,3],[18,1],[21,3],[21,1],[23,3],[23,1],[25,3],[25,1],[27,3],[27,1],[29,2],[29,1],[32,1],[32,3],[36,1],[36,3],[38,3],[38,1],[33,4],[33,3],[33,1],[5,0],[5,1],[13,0],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-2]; return this.$; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 4: this.$ = ['folbox', $$[$0-2], $$[$0-4], this._$]; 
break;
case 5: this.$ = ['box', $$[$0-2], this._$]; 
break;
case 6: this.$ = ['rule', $$[$0-1], $$[$0] ? $$[$0] : ["premise", null], this._$]; 
break;
case 7: this.$ = ['with', $$[$0-2], $$[$0]]; 
break;
case 10: this.$ = ['forall', $$[$0-1], $$[$0]]; 
break;
case 11: this.$ = ['exists', $$[$0-1], $$[$0]]; 
break;
case 12: this.$ = ['iff', $$[$0-2], $$[$0]]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = ['->', $$[$0-2], $$[$0]]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = ['and', $$[$0-2], $$[$0]]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = ['or', $$[$0-2], $$[$0]]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = ['=', $$[$0-2], $$[$0]]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = ['not', $$[$0]]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = ['paren', $$[$0-1]]; 
break;
case 26: this.$ = [$$[$0]]; 
break;
case 27: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 28: this.$ = ['id', '=', [$$[$0-2], $$[$0-2]]]; 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = ['id', $$[$0-3], $$[$0-1]]; 
break;
case 31: this.$ = ['id', $$[$0-2], []]; 
break;
case 32: this.$ = ['id', $$[$0]]; 
break;
}
},
table: [{3:1,4:2,7:3,9:[1,4],12:5,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{1:[3]},{5:20,6:[2,33],8:[1,21]},{6:[2,2],8:[2,2]},{4:23,7:3,9:[1,4],10:22,12:5,14:[1,24],15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{6:[2,35],8:[2,35],13:25,39:[1,26]},{6:[2,8],8:[2,8],35:[2,8],39:[2,8]},{6:[2,9],8:[2,9],35:[2,9],39:[2,9]},{15:[1,27]},{15:[1,28]},{6:[2,13],8:[2,13],22:[1,29],35:[2,13],39:[2,13]},{6:[2,15],8:[2,15],22:[2,15],24:[1,30],35:[2,15],39:[2,15]},{6:[2,17],8:[2,17],22:[2,17],24:[2,17],26:[1,31],35:[2,17],39:[2,17]},{6:[2,19],8:[2,19],22:[2,19],24:[2,19],26:[2,19],28:[1,32],35:[2,19],39:[2,19]},{6:[2,21],8:[2,21],22:[2,21],24:[2,21],26:[2,21],28:[2,21],30:[1,33],35:[2,21],39:[2,21]},{15:[1,19],32:34,33:17,34:[1,18]},{6:[2,23],8:[2,23],22:[2,23],24:[2,23],26:[2,23],28:[2,23],30:[2,23],35:[2,23],39:[2,23]},{6:[2,24],8:[2,24],22:[2,24],24:[2,24],26:[2,24],28:[2,24],30:[2,24],35:[2,24],39:[2,24]},{12:35,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{6:[2,32],8:[2,32],22:[2,32],24:[2,32],26:[2,32],28:[2,32],30:[2,32],34:[1,36],35:[2,32],37:[2,32],39:[2,32]},{6:[1,37]},{6:[2,34],7:38,9:[1,4],12:5,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{8:[1,39]},{8:[1,40]},{15:[1,41]},{6:[2,6],8:[2,6]},{6:[2,36],8:[2,36]},{12:42,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{12:43,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{15:[1,19],18:44,21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{15:[1,19],21:45,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{15:[1,19],23:46,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{15:[1,19],25:47,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{15:[1,19],27:48,29:14,31:[1,15],32:16,33:17,34:[1,18]},{6:[2,22],8:[2,22],22:[2,22],24:[2,22],26:[2,22],28:[2,22],30:[2,22],35:[2,22],39:[2,22]},{35:[1,49]},{15:[1,19],33:52,35:[1,51],36:50},{1:[2,1]},{6:[2,3],8:[2,3]},{4:53,7:3,9:[1,4],12:5,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{7:38,9:[1,4],11:[1,54],12:5,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{16:[1,55]},{6:[2,10],8:[2,10],35:[2,10],39:[2,10]},{6:[2,11],8:[2,11],35:[2,11],39:[2,11]},{6:[2,12],8:[2,12],35:[2,12],39:[2,12]},{6:[2,14],8:[2,14],22:[2,14],35:[2,14],39:[2,14]},{6:[2,16],8:[2,16],22:[2,16],24:[2,16],35:[2,16],39:[2,16]},{6:[2,18],8:[2,18],22:[2,18],24:[2,18],26:[2,18],35:[2,18],39:[2,18]},{6:[2,20],8:[2,20],22:[2,20],24:[2,20],26:[2,20],28:[2,20],35:[2,20],39:[2,20]},{6:[2,25],8:[2,25],22:[2,25],24:[2,25],26:[2,25],28:[2,25],30:[2,25],35:[2,25],39:[2,25]},{35:[1,56]},{6:[2,31],8:[2,31],22:[2,31],24:[2,31],26:[2,31],28:[2,31],30:[2,31],35:[2,31],37:[2,31],39:[2,31]},{35:[2,26],37:[1,57]},{8:[1,58]},{6:[2,5],8:[2,5]},{15:[1,59]},{6:[2,30],8:[2,30],22:[2,30],24:[2,30],26:[2,30],28:[2,30],30:[2,30],35:[2,30],37:[2,30],39:[2,30]},{15:[1,19],33:52,36:60},{7:38,9:[1,4],11:[1,61],12:5,15:[1,19],17:6,18:7,19:[1,8],20:[1,9],21:10,23:11,25:12,27:13,29:14,31:[1,15],32:16,33:17,34:[1,18]},{8:[2,7]},{35:[2,27]},{6:[2,4],8:[2,4]}],
defaultActions: {37:[2,1],59:[2,7],60:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], tstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.pop() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = token;
                token = tstack.pop();
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* comments are ignored */
break;
case 1:return 26;
break;
case 2:return 28;
break;
case 3:return 24;
break;
case 4:return 22;
break;
case 5:return 31;
break;
case 6:return 'UNION';
break;
case 7:return 'INTERSECTION';
break;
case 8:return 30;
break;
case 9:return 'EVERY';
break;
case 10:return 14;
break;
case 11:return "OF";
break;
case 12:/* ignore digits, for now */
break;
case 13:
				// Syntax: "[...] : ruleName [[elim/intro] [NumOrRange[, NumOrRange]*]]
				
				// strip the leading colon and spaces
				yy_.yytext = yy_.yytext.substr(yy_.yytext.substr(1).search(/\S/));
				
				// find the beginning of the first line number
				yy_.yytext = yy_.yytext.trim();
				var pos = yy_.yytext.search(/\s+\d+/);
				var lineranges = null, name = yy_.yytext;
				if (pos != -1) {
					name = yy_.yytext.substr(0, pos);
					lineranges = yy_.yytext.substr(pos+1).split(/\s*,\s*/);
				}
				var parts = name.split(' ');
				var rtype = null, side = null;
				if (parts[0]) {
					name = parts[0];
					rtype = parts[1];
					if (rtype && (parts = rtype.match(/([a-zA-Z]+)(\d+)/))) {
						rtype = parts[1];
						side = parts[2];
					}
				}
				yy_.yytext = [name, rtype, side, lineranges];
				return 39;
				
break;
case 14:return 20;
break;
case 15:return 'IN';
break;
case 16:return 'EMPTYSET';
break;
case 17:return 19;
break;
case 18:return 34;
break;
case 19:return 35;
break;
case 20:return 15;
break;
case 21:return 37;
break;
case 22: /* manually close an assumption box */
				this._log("MANUAL DEBOX");
				var expectedNewIndent = this._iemitstack.length - 1;
				var actualNewIndent = (yy_.yytext.match(/\|/g)||[]).length;
				if (actualNewIndent > 0 && expectedNewIndent != actualNewIndent) {
					this._log("Indentation " + actualNewIndent + ", expected: " + expectedNewIndent);
					throw new Error("End assumption indentation mismatch");
				}
				this._iemitstack.shift();
				return 11;
				
break;
case 23:
				/* Similar to the idea of semantic whitespace, we keep track of virtual
				 * BOX/DEBOX characters based on a stack of | occurrences
				 */
				    var indentation = yy_.yytext.length;
				    if (indentation > this._iemitstack[0]) {
					this._iemitstack.unshift(indentation);
					this._log(this.topState(), "BOX", this.stateStackSize());
					this.myBegin(this.topState(), 'deepening, due to indent'); // deepen our current state
					return 9;
				    }

				    var tokens = [];

				    while (indentation < this._iemitstack[0]) {
					this.myPopState();
					this._log(this.topState(), "DEBOX", this.stateStackSize());
					tokens.push("DEBOX");
					this._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;

				
break;
case 24:
				// remaining DEBOXes implied by EOF
				var tokens = [];

				while (this._iemitstack[0]) {
					tokens.unshift("DEBOX");
					this._iemitstack.shift();
				}
				tokens.unshift("ENDOFFILE");
				if (tokens.length) return tokens;
				
break;
case 25:/* eat blank lines */
break;
case 26:return 8;
break;
case 27:/* ignore whitespace */
break;
}
},
rules: [/^(?:#.*[\n\r]+)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:implies|->|=>)/,/^(?:iff|<->|=>)/,/^(?:not|~|!)/,/^(?:union\b)/,/^(?:intersection\b)/,/^(?:=)/,/^(?:every\b)/,/^(?:with\b)/,/^(?:of\b)/,/^(?:\d+)/,/^(?:(:.*))/,/^(?:E\.)/,/^(?:in\b)/,/^(?:empty\b)/,/^(?:A\.)/,/^(?:\()/,/^(?:\))/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*))/,/^(?:,)/,/^(?:\|*-+)/,/^(?:\|+)/,/^(?:$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:\n)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"inclusive":true}}
};
jisonLexerFn = lexer.setInput;
lexer.setInput = function(input) {
        var debug = false;
        this._iemitstack = [0];
        this._log = function() { if (debug) console.log.apply(this, arguments); };
        this.myBegin = function(state, why) { this._log("Begin " + state + " because " + why); this.begin(state); };
        this.myPopState = function() { this._log("Popping " + this.popState() + " to " + this.topState()); };
        return jisonLexerFn.call(this, input);
};;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = folproofParser;
exports.Parser = folproofParser.Parser;
exports.parse = function () { return folproofParser.parse.apply(folproofParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}